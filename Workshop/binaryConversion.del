globalvar define asciiChars = [" ","y","o","u","t","u","b","e",".","c","o","m","/","w","a","t","c","h","?","v","=","N","y","l","_","J","0","B","h","q","l","E"," ","!","\"","#","$","%","&","'","(",")","*","+",",","-",".","/",0,1,2,3,4,5,6,7,8,9,":",";","<","=",">","?","@","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","[","\\","]","^","_","`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","{","|","}","~",":)"];
globalvar define currentdecoded;
void DecodeString(define array){ //input will be an array of binary numbers encapsuled by another array but array append doesnt work that way and it literally copies what's inside to base array
    currentdecoded = "";
    define decodedstring = "";
    define calc = 0;
    for (define i = 7; i < CountOf(array); i+=8) {
        for(define iber = 0; iber < 8;iber++){
            define iter = i - iber;
            calc += array[iter]*RaiseToPower(2,iber);
            if(iber == 7) {
                calc = 0;
            }
        }
    }
    currentdecoded = decodedstring;
}
void DecodeNumber(define array){ //input will be an array of binary numbers encapsuled by another array but array append doesnt work that way and it literally copies what's inside to base array
    define decodednum = 0;
        currentdecoded = 0;
        define calc = 0;
        define digit =0;
        for (define i = 7; i < CountOf(array); i+=8) {
            for(define iber = 0; iber < 8;iber++){
                define iter = i - iber;
                calc += array[iter]*RaiseToPower(2,iber);
                if(iber == 7) {
                    define power = RaiseToPower(10,CountOf(array)/8 - 1 - digit);//Reverse
                    decodednum += asciiChars[calc] * power;
                    calc = 0;
                    digit++;
                }
            }
        }
    currentdecoded = decodednum;
}

void DecodeSens(define array){
    define decodednum = 0;
    currentdecoded = 0;
    define calc = 0;
    define digit =0;
    for (define i = CountOf(array) -9; i >= -1; i-=8) {
        for(define iber = 8; iber > 0;iber--){
            define iter = i + iber;
            calc += array[iter]*RaiseToPower(2,8-iber);
            if(iber == 1) {
                define power = RaiseToPower(10,digit - 2);//normal
                decodednum += asciiChars[calc] * power;
                calc = 0;
                digit++;
                }
            }
        }
    currentdecoded = decodednum;
    SmallMessage(HostPlayer(),<"Decoded Sensitivy value: <0>", decodednum>);
}

void DecodeWeed(define array, define isnumber){
    define swag;
    if(isnumber) swag = 0;
    else swag = "";
    define diggity = CountOf(array) -1;
    define wow = EmptyArray();
    for(define goshdarn =0; goshdarn<CountOf(array);goshdarn++){
        if(isnumber){
            define pooper = RaiseToPower(10, diggity - goshdarn);
            define epicnumber = (asciiChars[array[goshdarn]] * pooper);
            swag += epicnumber; 
            wow = Append(wow,epicnumber);
            wow = Append(wow,pooper);
        } 
        else swag = <"<0><1>",swag,asciiChars[array[goshdarn]]>;
        /*if(isnumber){
            wow = Append(wow,swag);   //    2   7   16
            wow = Append(wow,goshdarn);//   0   1   2
            wow = Append(wow,diggity);//    2   2   2
        }*/
    }
    SmallMessage(AllPlayers(),<"Decoded: <0>",swag>);

    currentdecoded = swag;
}

